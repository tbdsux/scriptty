import { LanguageName } from '@uiw/codemirror-extensions-langs';

export const codeDefaults: Record<LanguageName, string> = {
  apl: "'Hello, World!'",
  asciiArmor:
    '-----BEGIN PGP MESSAGE-----\nHello World\n-----END PGP MESSAGE-----',
  asterisk: 'exten => s,1,Playback(hello-world)',
  c: 'printf("Hello, World!");',
  csharp: 'System.Console.WriteLine("Hello, World!");',
  scala: 'println("Hello, World!")',
  solidity:
    '// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ncontract HelloWorld { function greet() public pure returns (string memory) { return "Hello, World!"; } }',
  kotlin: 'println("Hello, World!")',
  shader:
    'void main() { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); } // Simplified, actual output depends on shader type and environment',
  nesC: 'module HelloWorldAppC { uses interface Boot; } implementation { command error_t Boot.booted() { call Leds.led0On(); return SUCCESS; } } // More complex, typically blinks an LED',
  objectiveC: 'NSLog(@"Hello, World!");',
  objectiveCpp: 'NSLog(@"Hello, World!");',
  squirrel: 'print("Hello, World!");',
  ceylon: 'print("Hello, World!");',
  dart: "print('Hello, World!');",
  cmake: 'message(STATUS "Hello, World!")',
  cobol: 'DISPLAY "Hello, World!".',
  commonLisp: '(format t "Hello, World!~%")',
  crystal: 'puts "Hello, World!"',
  cypher: "CREATE (n:Greeting {message: 'Hello, World!'}) RETURN n.message",
  d: 'import std.stdio; void main() { writeln("Hello, World!"); }',
  diff: '--- a/file.txt\\n+++ b/file.txt\\n@@ -1 +1 @@\\n-Hello\\n+Hello, World!',
  dtd: '<!ELEMENT greeting (#PCDATA)>',
  dylan: 'format-out("Hello, World!\\n");',
  ebnf: 'greeting ::= "Hello, World!";',
  ecl: "OUTPUT('Hello, World!');",
  eiffel: 'print("Hello, World!%N")',
  elm: 'import Html exposing (text)\\nmain = text "Hello, World!"',
  factor: '"Hello, World!" print',
  fcl: "// FCL does not have a direct 'print' an FCL file defines a fuzzy control system.",
  forth: '.(" Hello, World!") CR',
  fortran: "PRINT *, 'Hello, World!'",
  gas: '.string "Hello, World!\\n"',
  gherkin:
    'Feature: Greeting\\n  Scenario: Say hello\\n    When I say hello\\n    Then the world should hear "Hello, World!"',
  groovy: "println 'Hello, World!'",
  haskell: 'main = putStrLn "Hello, World!"',
  haxe: 'trace("Hello, World!");',
  http: 'GET / HTTP/1.1\\nHost: example.com\\n\nHello, World!',
  idl: "PRINT, 'Hello, World!'",
  jinja2: "{{ 'Hello, World!' }}",
  mathematica: 'Print["Hello, World!"]',
  mbox: 'From sender@example.com Mon May 19 10:00:00 2025\\nSubject: Hello\\n\\nHello, World!',
  mirc: 'echo -a Hello, World!',
  modelica:
    'model HelloWorld "My first Modelica model" Real x; initial equation x = 0; equation der(x) = 1; annotation(Documentation(info="<html><p>Hello World example, displays nothing by itself.</p></html>")); end HelloWorld; // Modelica is for modeling, not direct console output of strings like this.',
  mscgen: 'msc { a,b; a->b [label="Hello, World!"]; }',
  mumps: 'W "Hello, World!",!',
  nsis: 'MessageBox MB_OK "Hello, World!"',
  ntriples:
    '<http://example.org/subject> <http://example.org/predicate> "Hello, World!" .',
  octave: "disp('Hello, World!');",
  oz: "{Show 'Hello, World!'}",
  pig: "A = LOAD 'data' AS (line:chararray); B = FOREACH A GENERATE 'Hello, World!'; DUMP B;",
  properties: 'greeting = Hello, World!',
  protobuf:
    'message Greeting { required string message = 1; } // Then: message_instance.message = "Hello, World!"',
  puppet: "notify { 'Hello, World!': }",
  q: ' `:: "Hello, World!"',
  sas: "DATA _NULL_; PUT 'Hello, World!'; RUN;",
  sass: '/* Hello, World! */ body:before { content: "Hello, World!"; }',
  liquid: "{{ 'Hello, World!' }}",
  mermaid: 'graph TD; A[Hello] --> B[World!];',
  nix: '{ message = "Hello, World!"; }',
  svelte: '<script>let greeting = "Hello, World!";</script><h1>{greeting}</h1>',
  sieve:
    'require ["fileinto"]; # Sieve doesn\'t print; it filters email. This is a minimal valid script.',
  smalltalk: "Transcript show: 'Hello, World!'; cr.",
  solr: '{ "add": { "doc": { "id": "1", "title": "Hello, World!" } } }',
  sparql: 'SELECT ?greeting WHERE { BIND("Hello, World!" AS ?greeting) }',
  spreadsheet: 'A1: Hello, World!',
  stex: '\\documentclass{article}\\begin{document}Hello, World!\\end{document}',
  textile: 'h1. Hello, World!',
  tiddlyWiki: '* Hello, World!',
  tiki: 'Hello, World! (entered in a TikiWiki page)',
  troff: '.TL\\nHello, World!',
  ttcn: '// TTCN-3 does not have a simple one-line print, it\'s a test language. A basic log: log("Hello, World!")',
  turtle:
    '@prefix msg: <http://example.org/msg#> . msg:greeting msg:text "Hello, World!" .',
  velocity: '#set( $greeting = "Hello, World!" )$greeting',
  verilog: 'initial $display("Hello, World!");',
  vhdl: 'report "Hello, World!";',
  webIDL:
    '// WebIDL defines interfaces, not executable code. interface Greeter { void sayHello(); };',
  xQuery: '("Hello, World!")',
  yacas: 'Print("Hello, World!");',
  z80: "; Z80 Assembly requires a routine, not one line. ORG 0100H LD DE,message CALL 0005H RET message: DB 'Hello, World!',0DH,0AH,'$'",
  wast: '(module (func $hello (import "console" "log") (param i32)) (func (export "main") (call $hello (i32.const 123)))) ;; Simplified, implies JS host for log',
  javascript: "console.log('Hello, World!');",
  jsx: "console.log('Hello, World!'); // or as a component: const HelloWorld = () => <h1>Hello, World!</h1>;",
  typescript: "console.log('Hello, World!');",
  tsx: "console.log('Hello, World!'); // or as a component: const HelloWorld = (): JSX.Element => <h1>Hello, World!</h1>;",
  vue: '<template><h1>Hello, World!</h1></template>',
  angular: '// In a component template: <h1>Hello, World!</h1>',
  json: '{ "greeting": "Hello, World!" }',
  html: '<h1>Hello, World!</h1>',
  css: 'body::before { content: "Hello, World!"; }',
  python: "print('Hello, World!')",
  markdown: '# Hello, World!',
  xml: '<greeting>Hello, World!</greeting>',
  sql: "SELECT 'Hello, World!';",
  mysql: "SELECT 'Hello, World!';",
  pgsql: "SELECT 'Hello, World!';",
  java: 'System.out.println("Hello, World!");',
  rust: 'println!("Hello, World!");',
  cpp: 'std::cout << "Hello, World!" << std::endl;',
  lezer:
    '// Lezer is a parser system, not a language to print. exampleGrammar: top { SayHello } SayHello { "Hello" "World!" }',
  php: "<?php echo 'Hello, World!'; ?>",
  go: 'package main; import "fmt"; func main() { fmt.Println("Hello, World!") }',
  shell: 'echo "Hello, World!"',
  lua: 'print("Hello, World!")',
  swift: 'print("Hello, World!")',
  tcl: 'puts "Hello, World!"',
  yaml: 'greeting: Hello, World!',
  vb: 'Console.WriteLine("Hello, World!")',
  powershell: 'Write-Host "Hello, World!"',
  brainfuck:
    '++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.',
  stylus: 'body\n  &:before\n    content: "Hello, World!"',
  erlang: 'io:fwrite("Hello, World!\\n").',
  nginx:
    "# In nginx.conf, to return directly (simplified):\n# location /hello { return 200 'Hello, World!'; }",
  perl: 'print "Hello, World!\\n";',
  ruby: 'puts "Hello, World!"',
  pascal: "WriteLn('Hello, World!');",
  livescript: "console.log 'Hello, World!'",
  less: 'body::before { content: "Hello, World!"; }',
  scheme: '(display "Hello, World!") (newline)',
  toml: 'greeting = "Hello, World!"',
  vbscript: 'MsgBox "Hello, World!"',
  clojure: '(println "Hello, World!")',
  coffeescript: "console.log 'Hello, World!'",
  julia: 'println("Hello, World!")',
  dockerfile: 'FROM alpine\nCMD ["echo", "Hello, World!"]',
  r: 'print("Hello, World!")',
};
